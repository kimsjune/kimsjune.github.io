[
  {
    "objectID": "posts/240515-shiny-pt1/index.html",
    "href": "posts/240515-shiny-pt1/index.html",
    "title": "Shiny app for data viz part 1",
    "section": "",
    "text": "I’m hosting a shiny app written in R on a cloud server. Its purpose is to allow users to interactively visualize spatial gene expression data from fibrosing interstitial lung disease patients. Such interactivity is useful here because there are too many possible logical comparisons between groups than what can reasonably fit in a manuscript.\nAt one point, I was losing track of how inputs were being processed into intermediate/final outputs. I wrote down a pen and paper version before, but it’s gotten even more complicated than that.\nNextflow introduced me to mermaid flowcharts. I wrote down the following on the live editor:\n\nflowchart\n    input$anno_type_select --&gt;|reactive| ROIs\n    ROIs --&gt; reactiveRun\n    input$run --&gt; |eventReactive| reactiveRun\n    reactiveRun --&gt; |renderUI| output$customization\n    output$customization --&gt; |reactive| pcaPlot\n    reactiveRun --&gt; |eventReactive| contrast\n    contrast --&gt; |reactive| efit\n    input$lfc --&gt; |reactive| lfc\n    lfc --&gt; |reactive| topTableDF\n    efit --&gt; |reactive| topTableDF\n    contrast --&gt; |reactive| topTableDF\n    topTableDF --&gt; |downloadHandler| output$downloadTable\n    topTableDF --&gt; |renderUI| output$table\n    efit --&gt; |reactive| volcano\n    contrast --&gt; |reactive| plotHeight\n    plotHeight --&gt; |reactive| volcano\n    contrast --&gt; |reactive| volcano\n    reactiveRun --&gt; |eventReactive| spe_ruv_subset\n    spe_ruv_subset --&gt; |eventReactive| pca_ruv_results_subset\n    spe_ruv_subset --&gt; |reactive| pcaPlot\n    input$shapes_n --&gt; |reactive| pcaPlot\n    input$colours_n --&gt; |reactive| pcaPlot\n    pca_ruv_results_subset --&gt; |reactive| pcaPlot\n    pcaPlot --&gt; |renderUI| output$pca\n    pcaPlot --&gt; |downloadHandler| output$downloadPCA \n    input$toggle_PCAcustom --&gt; |observeEvent| toggle::PCAcustom\n    toggle::PCAcustom --&gt; |uiOutput| output$customization\n    input$shapes_n --&gt; |renderUI| output$customization\n    input$colours_n --&gt; |renderUI| output$customization\n    input$toggle_customRange --&gt; |observeEvent| toggle::show_customRange\n    toggle::show_customRange --&gt; |uiOutput| output$customRange\n    input$customX --&gt; |renderUI| output$customRange \n    input$customY --&gt; |renderUI| output$customRange\n    input$customX --&gt; |reactive| customX\n    input$customY --&gt; |reactive| customY\n    customY --&gt; |reactive| volcano\n    customX --&gt; |reactive| volcano\n    input$maxOverlap --&gt; |reactive| maxOverlap\n    maxOverlap --&gt; |reactive| volcano\n    volcano --&gt; |reactive| volcanoPlots\n    volcano --&gt; |renderUI| output$volcanoUI\n    volcanoPlots --&gt; |downloadHandler| output$downloadVolcano\n    input$top_n_genes --&gt; |reactive| top_n_genes\n    input$heatmap_col --&gt; |reactive| heatmap_col\n    input$heatmap_range --&gt; |reactive| heatmap_range\n    input$heatmap_size --&gt; |reactive| heatmap_size\n    input$heatmap_fontsize --&gt; |reactive| heatmap_fontsize \n    reactiveRun --&gt; |reactive| lcpm_subset_scale\n    spe_ruv_subset --&gt; |reactive| lcpm_subset_scale\n    reactiveRun --&gt; |reactive| colnames4heatmap\n    spe_ruv_subset --&gt; |reactive| colnames4heatmap\n    colnames4heatmap --&gt; |reactive| heatmap\n    lcpm_subset_scale --&gt; |reactive| lcpm_subset_scale_topGenes\n    topTableDF --&gt; |reactive| lcpm_subset_scale_topGenes\n    top_n_genes --&gt; |reactive| lcpm_subset_scale_topGenes\n    heatmap_range --&gt; |reactive| heatmap\n    heatmap_col --&gt;  |reactive| heatmap\n    heatmap_fontsize --&gt;  |reactive| heatmap\n    heatmap_size --&gt; |reactive| heatmap\n    lcpm_subset_scale_topGenes --&gt;  |reactive| heatmap\n    heatmap --&gt; |renderUI| output$heatmapUI\n    lcpm_subset_scale_topGenes --&gt; |downloadHandler| output$downloadHeatmap\n    heatmap --&gt; |downloadHandler| output$downloadHeatmap\n\n\n\n\nflowchart\n    input$anno_type_select --&gt;|reactive| ROIs\n    ROIs --&gt; reactiveRun\n    input$run --&gt; |eventReactive| reactiveRun\n    reactiveRun --&gt; |renderUI| output$customization\n    output$customization --&gt; |reactive| pcaPlot\n    reactiveRun --&gt; |eventReactive| contrast\n    contrast --&gt; |reactive| efit\n    input$lfc --&gt; |reactive| lfc\n    lfc --&gt; |reactive| topTableDF\n    efit --&gt; |reactive| topTableDF\n    contrast --&gt; |reactive| topTableDF\n    topTableDF --&gt; |downloadHandler| output$downloadTable\n    topTableDF --&gt; |renderUI| output$table\n    efit --&gt; |reactive| volcano\n    contrast --&gt; |reactive| plotHeight\n    plotHeight --&gt; |reactive| volcano\n    contrast --&gt; |reactive| volcano\n    reactiveRun --&gt; |eventReactive| spe_ruv_subset\n    spe_ruv_subset --&gt; |eventReactive| pca_ruv_results_subset\n    spe_ruv_subset --&gt; |reactive| pcaPlot\n    input$shapes_n --&gt; |reactive| pcaPlot\n    input$colours_n --&gt; |reactive| pcaPlot\n    pca_ruv_results_subset --&gt; |reactive| pcaPlot\n    pcaPlot --&gt; |renderUI| output$pca\n    pcaPlot --&gt; |downloadHandler| output$downloadPCA \n    input$toggle_PCAcustom --&gt; |observeEvent| toggle::PCAcustom\n    toggle::PCAcustom --&gt; |uiOutput| output$customization\n    input$shapes_n --&gt; |renderUI| output$customization\n    input$colours_n --&gt; |renderUI| output$customization\n    input$toggle_customRange --&gt; |observeEvent| toggle::show_customRange\n    toggle::show_customRange --&gt; |uiOutput| output$customRange\n    input$customX --&gt; |renderUI| output$customRange \n    input$customY --&gt; |renderUI| output$customRange\n    input$customX --&gt; |reactive| customX\n    input$customY --&gt; |reactive| customY\n    customY --&gt; |reactive| volcano\n    customX --&gt; |reactive| volcano\n    input$maxOverlap --&gt; |reactive| maxOverlap\n    maxOverlap --&gt; |reactive| volcano\n    volcano --&gt; |reactive| volcanoPlots\n    volcano --&gt; |renderUI| output$volcanoUI\n    volcanoPlots --&gt; |downloadHandler| output$downloadVolcano\n    input$top_n_genes --&gt; |reactive| top_n_genes\n    input$heatmap_col --&gt; |reactive| heatmap_col\n    input$heatmap_range --&gt; |reactive| heatmap_range\n    input$heatmap_size --&gt; |reactive| heatmap_size\n    input$heatmap_fontsize --&gt; |reactive| heatmap_fontsize \n    reactiveRun --&gt; |reactive| lcpm_subset_scale\n    spe_ruv_subset --&gt; |reactive| lcpm_subset_scale\n    reactiveRun --&gt; |reactive| colnames4heatmap\n    spe_ruv_subset --&gt; |reactive| colnames4heatmap\n    colnames4heatmap --&gt; |reactive| heatmap\n    lcpm_subset_scale --&gt; |reactive| lcpm_subset_scale_topGenes\n    topTableDF --&gt; |reactive| lcpm_subset_scale_topGenes\n    top_n_genes --&gt; |reactive| lcpm_subset_scale_topGenes\n    heatmap_range --&gt; |reactive| heatmap\n    heatmap_col --&gt;  |reactive| heatmap\n    heatmap_fontsize --&gt;  |reactive| heatmap\n    heatmap_size --&gt; |reactive| heatmap\n    lcpm_subset_scale_topGenes --&gt;  |reactive| heatmap\n    heatmap --&gt; |renderUI| output$heatmapUI\n    lcpm_subset_scale_topGenes --&gt; |downloadHandler| output$downloadHeatmap\n    heatmap --&gt; |downloadHandler| output$downloadHeatmap\n\n\n\n\n\n\nNodes represent input, data and/or output variables. Curves represent reactive expressions or rendering functions.\nSome takeaways:\n\nthe whole thing really depends on input$anno_type_select and input$run, which are user-selected biological groups and pressing run, respectively\nvisual outputs (PCA, table, volcano, or heatmap) are created using renderUI while their downloadable counterparts are created using downloadHandler\n\nI don’t think whatever has been renderUI-ed can be converted into downloadable image files\n\nmostly straightforward except for toggle::*\n\nthese open customization panels that are not enabled by default\nif enabled, they have to take additional input from users\ninput through input$toggle_* activates toggle::*\nthis activates output$* through uiOutput\n\nsince this is an output, this is shown to users\n\ninputs are baked into these outputs!!\nreactive expressions take these inputs downstream\n\nflowchart is written by hand, so there can be some mistakes and omissions\n\nbut, writing it out could be helpful for really getting down to the nitty-gritty of what is exactly happening\nis there a package that can automatically generate a flowchart?\n\n\nThere are many other things that I could document about this app. Hosting it online for free through the Digital Alliance of Canada’s cloud was a bit of a journey. The how and why might be the topic for a part 2. In a part 3, I might document some cute tricks in R to process data with reactivity.\nYou can find the entire app’s code here. The raw and processed data underpinning the app are under embargo at this time.\n\n\\ (•◡•) /\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/240508-first-blog/index.html",
    "href": "posts/240508-first-blog/index.html",
    "title": "First blog",
    "section": "",
    "text": "After hemming and hawing on whether to create a blog and which tool to use, here is my first post 😄.\nI’ve been finding the following blogs particularly useful: Aster Hu, Drew Dimmery, and Danielle Navarro.\nI’ve decided to use Quarto because it seems to be more dynamic than Jekyll (as far as my understanding goes). Syntax highlighting for bash, groovy and R in expandable, copy-able code chunks will be nice for various scripts that I want to post eventually.\nI think my first project will be to write my CV using an rmarkdown template and share it as a pdf. This blog + CV[^1] will meet the minimum requirement for publication on Github pages.\n\n\\ (•◡•) /\n\n\n\n\n Back to top"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "Education\nPhD Biochemistry  Western University 2016-2022\nBSc Hon. Specialization in Biochemistry of Infection and Immunity  Western University 2012-2016\n\n\nBioinformatics competencies\ncommand line (proficient):\n\ntools: bowtie2, bwa, STAR, salmon, kallisto, fastqc, fastp, featureCounts, htseq-count, deeptools\nworkflow: snakemake, nextflow\nHPC: linux, slurm, globus\n\nR (proficient):\n\ndifferential gene expression analysis: edgeR, DESeq2, limma, voom, standR\ndata wrangling and visualization: ggplot2, ComplexHeatmap, tidyverse\ninteractivity: shiny\n\npython (beginner):\n\nnumpy, pandas, matplotlib, scanpy, squidpy\n\n\n\nPeer reviewed publications\nKim, S. J., Cecchini, M.J., Woo, E., Jayawardena, N., Passos, D. T., Dick, F. A. & Mura, M. Spatially resolved gene expression profiles in fibrosing interstitial lung diseases. Thorax (under review) (2024).\nKim, S. J., Kiser, P. K., Asfaha, S., DeKoter, R. P. & Dick, F. A. EZH2 inhibition stimulates repetitive element expression and viral mimicry in resting splenic B cells. The EMBO Journal 42, e114462 (2023).\nKim, S. J., MacDonald, J. I. & Dick, F. A. Phosphorylation of the RB C-terminus regulates condensin II release from chromatin. Journal of Biological Chemistry 296, (2021).\nKim, S. J., Asfaha, S. & Dick, F. A. CDK4 inhibitors thwart immunity by inhibiting phospho-RB-NF-κB complexes. Mol Cell 73, 1–2 (2019).\nIshak, C. A. et al. An RB-EZH2 complex mediates silencing of repetitive DNA sequences. Mol Cell 64, 1074–1087 (2016).\n\n\nPresentations\nKim, S. J., Kiser, P. K., DeKoter, R. P. & Dick, F. A. Elucidating the mechanism behind EZH2 inhibition and immune activation. Oncology Research & Education Day.  London ON, Canada 2023\nKim, S. J., Kiser, P. K., DeKoter, R. P. & Dick, F. A. Elucidating the mechanism behind EZH2 inhibition and immune activation. Oncology Research & Education Day.  London ON, Canada 2022\nKim, S. J. & Dick, F.A. Elucidating the mechanism behind EZH2 inhibition and anti-viral immune signaling. Oncology Research & Education Day.  London ON, Canada 2021\nKim, S. J., Ishak, C.A. & Dick, F.A. Pharmacological inhibition of EZH2 activates anti-viral immunity. London Immuno-Oncology Symposium  London ON, Canada 2020\nKim, S. J., Ishak, C.A. & Dick, F.A. Pharmacological inhibition of E1A-insensitive pRB-E2F1-EZH2 complex activates anti-viral immunity. ICGEB DNA Tumour Virus Meeting.  Trieste, Italy. 2019\n\n\nAwards\nDr. William Zaharia Award 2024\nOntario Graduate Scholarship 2020\nHoward Hughes Medical Institute Stipend 2018\nCancer Research and Technology Transfer Scholarship 2017\n\n\nAcademic experiences\nAdvanced Sequencing Technologies and Applications.  Cold Spring Harbor Laboratory 2018\n\n\n\n\nSource for CV style and guide:\nHuang, Cynthia. 2023. “Publishing HTML and PDF Versions of a Quarto CV Without LaTex.” August 22, 2023. https://www.cynthiahqy.com/posts/cv-html-pdf.\n\n\n Back to top"
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "About",
    "section": "",
    "text": "I’m Joon.\n\n\n\nI trained under Dr. Fred Dick at Western University throughout my undergrad and graduate degrees. We did some interesting work, involving a new mouse strain (created in-house with CRISPR-Cas9), epigenetic silencing of repetitive elements and viral mimicry. Currently, I am looking to profile spatially resolved transcriptomes in fibrosing interstitial lung diseases with Dr. Marco Mura also at Western."
  },
  {
    "objectID": "about/index.html#about-me",
    "href": "about/index.html#about-me",
    "title": "About",
    "section": "",
    "text": "I’m Joon.\n\n\n\nI trained under Dr. Fred Dick at Western University throughout my undergrad and graduate degrees. We did some interesting work, involving a new mouse strain (created in-house with CRISPR-Cas9), epigenetic silencing of repetitive elements and viral mimicry. Currently, I am looking to profile spatially resolved transcriptomes in fibrosing interstitial lung diseases with Dr. Marco Mura also at Western."
  },
  {
    "objectID": "about/index.html#more-about-me",
    "href": "about/index.html#more-about-me",
    "title": "About",
    "section": "More about me",
    "text": "More about me\nDespite being Korean, I have both first and middle names. Something to do with a mistake on my first passport application. ‘Seung’ part is challenging. It’s supposed to be as such: ."
  },
  {
    "objectID": "about/index.html#purpose-of-this-blog",
    "href": "about/index.html#purpose-of-this-blog",
    "title": "About",
    "section": "Purpose of this blog",
    "text": "Purpose of this blog\nI find myself going back to my old code to find some key snippets that I cannot recall. It’s a bit of a dumpster dive every time. I hope writing it down here will help me retrieve those easier. This kind of format is apparently called a “digital garden”, but I’m anticipating more of a digital yard waste.\nThere are some coding “projects” in planning/dev phase that I wouldn’t be able to digitally document otherwise."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Shiny app for data viz part 1\n\n\n\n\n\n\nR\n\n\nshiny\n\n\ndata visualization\n\n\n2024\n\n\n\nunderstanding the flow between inputs, variables and outputs\n\n\n\n\n\nMay 15, 2024\n\n\njk\n\n\n\n\n\n\n\n\n\n\n\n\nNextflow: using splitCsv() operator\n\n\n\n\n\n\nnextflow\n\n\n2024\n\n\n\na tech tip to future self\n\n\n\n\n\nMay 8, 2024\n\n\njk\n\n\n\n\n\n\n\n\n\n\n\n\nFirst blog\n\n\n\n\n\n\nnews\n\n\n2024\n\n\n\nhi there\n\n\n\n\n\nMay 7, 2024\n\n\njk\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "posts/240508-nextflow-splitcsv/index.html",
    "href": "posts/240508-nextflow-splitcsv/index.html",
    "title": "Nextflow: using splitCsv() operator",
    "section": "",
    "text": "Introduction\nWhen I get *.fastq.gz files back for my Visium spatial libraries, spaceranger count command is used to generate various output files for QC metrics and downstream analysis. The command in my slurm job script looks like this:\n\nspaceranger count --id=18_57617_A1 --transcriptome=/home/skim823/projects/def-fdick/skim823/genomes/spacerange_hg38/refdata-gex-GRCh38-2020-A --probe-set=/home/skim823/projects/def-fdick/skim823/programs/spaceranger-2.1.1/probe_sets/Visium_Human_Transcriptome_Probe_Set_v2.0_GRCh38-2020-A.csv --fastqs=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim --sample=18_57617_A1_D1 --cytaimage=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/assay_CAVG10505_2023-12-06_10-13-34_V43L25-333_1701876913_CytAssist/CAVG10505_2023-12-06_10-35-13_2023-12-06_10-13-34_V43L25-333_D1_18-57617-A1.tif --image=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/tiff/18-57617-A1.tif --slide=V43L25-333 --area=D1 --loupe-alignment=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/json/18_57617_A1.json\n\nWith future samples, I want to use Nextflow to automate job submission.\n\n\nStrategy\nMy initial thought was to parse params.fastq, but --cytaimage, --image, --area, and --loupe-alignment arguments are no where to be found in these fastq files (unless I submit an ungodly sample name to the genomics core). Instead, I can provide a metadata.csv and use splitCsv() to store and consume all the required arguments.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nsample\ncytaimage\nimage\nslide\narea\njson\n\n\n\n\n18_57617_A1\n18_57617_A1_D1\netc/assay_CAVG10505_2023-12-06_10-13-34_V43L25-333_1701876913_CytAssist/CAVG10505_2023-12-06_10-35-13_2023-12-06_10-13-34_V43L25-333_D1_18-57617-A1.tif\netc/tiff/18-57617-A1.tif\nV43L25-333\nD1\netc/json/18_57617_A1.json\n\n\n20_24241_B2\n20_24241_B2_A1\netc/assay_CAVG10505_2023-12-06_10-13-34_V43L25-333_1701876913_CytAssist/CAVG10505_2023-12-06_10-35-13_2023-12-06_10-13-34_V43L25-333_A1_20-24241-B2.tif\netc/tiff/20-24241-B2.tif\nV43L25-333\nA1\netc/json/20_24241_B2.json\n\n\n\n\n\nIn the working directory, I have ${sample}_{S7,S8}_{L001,L002}_{R1,R2}_001.fastq.gz files. id and sample arguments in the .csv file must follow such format above. I think spaceranger is expecting some pre-determined fastq.gz read pairs across a couple of sequencing lanes.\netc/ is a subdirectory with CytAssist images, hi-res images, and alignment json files.\n\n\nNextflow\nThe full main.nf looks like this:\n\nnextflow.enable.dsl=2\nparams.csv = \"$projectDir/metadata.csv\"\nparams.transcriptome = \"/home/skim823/projects/def-fdick/skim823/genomes/spacerange_hg38/refdata-gex-GRCh38-2020-A\"\nparams.probeSet = \"/home/skim823/projects/def-fdick/skim823/programs/spaceranger-2.1.1/probe_sets/Visium_Human_Transcriptome_Probe_Set_v2.0_GRCh38-2020-A.csv\"\n\ncsv_ch = Channel\n            .fromPath(params.csv)\n            .splitCsv(header: true)\n            .map(\n                row -&gt; \n                tuple(row.id,\n                row.sample,\n                file (row.cytaimage),\n                file (row.image),\n                row.slide,\n                row.area,\n                file(row.json))\n            )\n\ntranscriptome_ch = Channel.fromPath(params.transcriptome)\nprobeSet_ch = Channel.fromPath(params.probeSet)\n\nprocess SPACECOUNT {\n    publishDir \"$projectDir/output\", mode: \"copy\"\n    cpus 32\n    memory 128.GB\n    time 2.h\n    clusterOptions '--account=def-muram'\n\n    input:\n    tuple val(id), val(sample), file (cytaimage), file (image), val(slide), val(area), file (json)\n    // setting directories as path() doesn't seem to work. It can't resolve relative paths. If I just use val(), I just have to express parameters as absolute paths in the script. \n    // path doesn't work but file does!\n    path transcriptome\n    path probeSet\n\n    output:\n    path \"$id/\"\n\n    script:\n    \"\"\"\n    spaceranger count --id $id  --fastqs $baseDir --sample $sample --cytaimage $cytaimage --image $image --slide $slide --area $area --loupe-alignment $json --transcriptome $transcriptome --probe-set $probeSet\n    \"\"\"\n}\n\nworkflow {\n    SPACECOUNT(csv_ch, transcriptome_ch.collect(), probeSet_ch.collect())\n}\n\n\n\n\n\n\n\nImportant\n\n\n\n\nwithin .map() (lines 9-18), must use file() instead of path() (error otherwise)\nline 34: must use file() for file paths instead of… path() (no error, but the relative path does not resolve). I thought file() was DSL=1 lingo, but maybe not?\nreference\n\n\n\n\n\\ (•◡•) /\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "Curriculum vitae",
    "section": "",
    "text": "Download current CV\n  \n\n\n\n  \n\n\n\n\n Back to top"
  }
]