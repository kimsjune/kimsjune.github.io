{"title":"Nextflow: using splitCsv() operator","markdown":{"yaml":{"title":"Nextflow: using splitCsv() operator","author":"jk","description":"a tech tip to future self","date":"2024-05-08","format":{"html":"default"},"toc":true,"categories":["nextflow"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nWhen I get `*.fastq.gz` files back for my Visium spatial libraries, `spaceranger count` command is used to generate various output files for QC metrics and downstream analysis. The command in my slurm job script looks like this:\n\n```{r, engine='bash'}\n#| eval: false\n#| code-overflow: wrap\nspaceranger count --id=18_57617_A1 --transcriptome=/home/skim823/projects/def-fdick/skim823/genomes/spacerange_hg38/refdata-gex-GRCh38-2020-A --probe-set=/home/skim823/projects/def-fdick/skim823/programs/spaceranger-2.1.1/probe_sets/Visium_Human_Transcriptome_Probe_Set_v2.0_GRCh38-2020-A.csv --fastqs=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim --sample=18_57617_A1_D1 --cytaimage=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/assay_CAVG10505_2023-12-06_10-13-34_V43L25-333_1701876913_CytAssist/CAVG10505_2023-12-06_10-35-13_2023-12-06_10-13-34_V43L25-333_D1_18-57617-A1.tif --image=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/tiff/18-57617-A1.tif --slide=V43L25-333 --area=D1 --loupe-alignment=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/json/18_57617_A1.json\n```\n\nWith future samples, I want to use `Nextflow` to automate job submission.\n\n### Strategy\n\nMy initial thought was to parse `params.fastq`, but `--cytaimage`, `--image`, `--area`, and `--loupe-alignment` arguments are no where to be found in these `fastq` files (unless I submit an ungodly sample name to the genomics core). Instead, I can provide a `metadata.csv` and use `splitCsv()` to store and consume all the required arguments.\n\n```{r}\n#| echo: false\nmeta <- read.csv(file=\"metadata.csv\", header=T)\nknitr::kable(meta)\n```\n\nIn the working directory, I have `${sample}_{S7,S8}_{L001,L002}_{R1,R2}_001.fastq.gz` files. `id` and `sample` arguments in the .csv file must follow such format above. I think `spaceranger` is expecting some pre-determined `fastq.gz` read pairs across a couple of sequencing lanes.\n\n`etc/` is a subdirectory with CytAssist images, hi-res images, and alignment json files.\n\n### Nextflow\n\nThe full `main.nf` looks like this:\n\n```{groovy}\n#| eval: false\n#| code-line-numbers: true\nnextflow.enable.dsl=2\nparams.csv = \"$projectDir/metadata.csv\"\nparams.transcriptome = \"/home/skim823/projects/def-fdick/skim823/genomes/spacerange_hg38/refdata-gex-GRCh38-2020-A\"\nparams.probeSet = \"/home/skim823/projects/def-fdick/skim823/programs/spaceranger-2.1.1/probe_sets/Visium_Human_Transcriptome_Probe_Set_v2.0_GRCh38-2020-A.csv\"\n\ncsv_ch = Channel\n            .fromPath(params.csv)\n            .splitCsv(header: true)\n            .map(\n                row -> \n                tuple(row.id,\n                row.sample,\n                file (row.cytaimage),\n                file (row.image),\n                row.slide,\n                row.area,\n                file(row.json))\n            )\n\ntranscriptome_ch = Channel.fromPath(params.transcriptome)\nprobeSet_ch = Channel.fromPath(params.probeSet)\n\nprocess SPACECOUNT {\n    publishDir \"$projectDir/output\", mode: \"copy\"\n    cpus 32\n    memory 128.GB\n    time 2.h\n    clusterOptions '--account=def-muram'\n\n    input:\n    tuple val(id), val(sample), file (cytaimage), file (image), val(slide), val(area), file (json)\n    // setting directories as path() doesn't seem to work. It can't resolve relative paths. If I just use val(), I just have to express parameters as absolute paths in the script. \n    // path doesn't work but file does!\n    path transcriptome\n    path probeSet\n\n    output:\n    path \"$id/\"\n\n    script:\n    \"\"\"\n    spaceranger count --id $id  --fastqs $baseDir --sample $sample --cytaimage $cytaimage --image $image --slide $slide --area $area --loupe-alignment $json --transcriptome $transcriptome --probe-set $probeSet\n    \"\"\"\n}\n\nworkflow {\n    SPACECOUNT(csv_ch, transcriptome_ch.collect(), probeSet_ch.collect())\n}\n```\n\n::: callout-important\n-   within `.map()` (lines 9-18), must use `file()` instead of `path()` (error otherwise)\n\n-   line 34: must use `file()` for file paths instead of... `path()` (no error, but the relative path does not resolve). I thought `file()` was DSL=1 lingo, but maybe not?\n\n-   [reference](https://nextflow-io.github.io/patterns/process-per-csv-record/)\n:::\n\n::: center\n\\\\ (•◡•) /\n:::\n","srcMarkdownNoYaml":"\n\n### Introduction\n\nWhen I get `*.fastq.gz` files back for my Visium spatial libraries, `spaceranger count` command is used to generate various output files for QC metrics and downstream analysis. The command in my slurm job script looks like this:\n\n```{r, engine='bash'}\n#| eval: false\n#| code-overflow: wrap\nspaceranger count --id=18_57617_A1 --transcriptome=/home/skim823/projects/def-fdick/skim823/genomes/spacerange_hg38/refdata-gex-GRCh38-2020-A --probe-set=/home/skim823/projects/def-fdick/skim823/programs/spaceranger-2.1.1/probe_sets/Visium_Human_Transcriptome_Probe_Set_v2.0_GRCh38-2020-A.csv --fastqs=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim --sample=18_57617_A1_D1 --cytaimage=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/assay_CAVG10505_2023-12-06_10-13-34_V43L25-333_1701876913_CytAssist/CAVG10505_2023-12-06_10-35-13_2023-12-06_10-13-34_V43L25-333_D1_18-57617-A1.tif --image=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/tiff/18-57617-A1.tif --slide=V43L25-333 --area=D1 --loupe-alignment=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/json/18_57617_A1.json\n```\n\nWith future samples, I want to use `Nextflow` to automate job submission.\n\n### Strategy\n\nMy initial thought was to parse `params.fastq`, but `--cytaimage`, `--image`, `--area`, and `--loupe-alignment` arguments are no where to be found in these `fastq` files (unless I submit an ungodly sample name to the genomics core). Instead, I can provide a `metadata.csv` and use `splitCsv()` to store and consume all the required arguments.\n\n```{r}\n#| echo: false\nmeta <- read.csv(file=\"metadata.csv\", header=T)\nknitr::kable(meta)\n```\n\nIn the working directory, I have `${sample}_{S7,S8}_{L001,L002}_{R1,R2}_001.fastq.gz` files. `id` and `sample` arguments in the .csv file must follow such format above. I think `spaceranger` is expecting some pre-determined `fastq.gz` read pairs across a couple of sequencing lanes.\n\n`etc/` is a subdirectory with CytAssist images, hi-res images, and alignment json files.\n\n### Nextflow\n\nThe full `main.nf` looks like this:\n\n```{groovy}\n#| eval: false\n#| code-line-numbers: true\nnextflow.enable.dsl=2\nparams.csv = \"$projectDir/metadata.csv\"\nparams.transcriptome = \"/home/skim823/projects/def-fdick/skim823/genomes/spacerange_hg38/refdata-gex-GRCh38-2020-A\"\nparams.probeSet = \"/home/skim823/projects/def-fdick/skim823/programs/spaceranger-2.1.1/probe_sets/Visium_Human_Transcriptome_Probe_Set_v2.0_GRCh38-2020-A.csv\"\n\ncsv_ch = Channel\n            .fromPath(params.csv)\n            .splitCsv(header: true)\n            .map(\n                row -> \n                tuple(row.id,\n                row.sample,\n                file (row.cytaimage),\n                file (row.image),\n                row.slide,\n                row.area,\n                file(row.json))\n            )\n\ntranscriptome_ch = Channel.fromPath(params.transcriptome)\nprobeSet_ch = Channel.fromPath(params.probeSet)\n\nprocess SPACECOUNT {\n    publishDir \"$projectDir/output\", mode: \"copy\"\n    cpus 32\n    memory 128.GB\n    time 2.h\n    clusterOptions '--account=def-muram'\n\n    input:\n    tuple val(id), val(sample), file (cytaimage), file (image), val(slide), val(area), file (json)\n    // setting directories as path() doesn't seem to work. It can't resolve relative paths. If I just use val(), I just have to express parameters as absolute paths in the script. \n    // path doesn't work but file does!\n    path transcriptome\n    path probeSet\n\n    output:\n    path \"$id/\"\n\n    script:\n    \"\"\"\n    spaceranger count --id $id  --fastqs $baseDir --sample $sample --cytaimage $cytaimage --image $image --slide $slide --area $area --loupe-alignment $json --transcriptome $transcriptome --probe-set $probeSet\n    \"\"\"\n}\n\nworkflow {\n    SPACECOUNT(csv_ch, transcriptome_ch.collect(), probeSet_ch.collect())\n}\n```\n\n::: callout-important\n-   within `.map()` (lines 9-18), must use `file()` instead of `path()` (error otherwise)\n\n-   line 34: must use `file()` for file paths instead of... `path()` (no error, but the relative path does not resolve). I thought `file()` was DSL=1 lingo, but maybe not?\n\n-   [reference](https://nextflow-io.github.io/patterns/process-per-csv-record/)\n:::\n\n::: center\n\\\\ (•◡•) /\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","email-obfuscation":"javascript","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","editor":"visual","resources":["CNAME"],"theme":{"light":"flatly","dark":"darkly"},"title-block-banner":true,"citation":false,"title":"Nextflow: using splitCsv() operator","author":"jk","description":"a tech tip to future self","date":"2024-05-08","categories":["nextflow"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}