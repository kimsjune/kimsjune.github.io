{
  "hash": "ecb73c1769fade7e0b693452d95dd218",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Shiny app for data viz part 2\"\nauthor: \"jk\"\ndescription: hosting a shiny app on the web\ndate: \"2024-05-22\"\nformat: html \n    # mermaid:\n    #   theme: default\ntoc: true\ncategories: [R, shiny, data visualization, 2024]\nexecute:\n  echo: true\n---\n\n### Rationale\n\nHere is the [first part](./../240515-shiny-pt1/index.qmd) to this series.\n\nOnce I had a production version of my app (to be discussed in part *3* like a movie prequel), I wanted to make it accessible. What exactly is the point if I'm the only one using it in my bedroom? Close to nada. So, it got me thinking about deployment options. My self-imposed requirement was that it couldn't cost me or the lab any money.\n\n### Option 1\n\nThe first option I tried was publishing on [shinyapps.io](https://www.shinyapps.io). This initially failed because their server did not have [some dependency](https://github.com/rstudio/shinyapps-package-dependencies/issues/358) installed. I chimed in on this issue, promptly gave up, and looked for other options. I only recently made my first PR that was able to [fix this](https://github.com/rstudio/shinyapps-package-dependencies/pull/377). Now the app is successfully published, but it crashes as soon as I do anything with it. I think it's due to lack of memory (1GB) with my free tier account. To get a custom URL and more performance, it's going to cost cool *\\$349/month* ðŸ™ƒ. On to the next option.\n\n### Option 2\n\nSome institutions like [Waterloo](https://uwaterloo.ca/math-faculty-computing-facility/services/r-shiny-server) and [Toronto](https://cran.utstat.utoronto.ca) seem to host shiny apps for free. Not Western or LHSC ðŸ˜­. On to the next option.\n\n### Option 3\n\nI could make a docker image that users can download and run locally. But I thought this still might be a barrier to some, so I ruled it out.\n\n### The last resort\n\n[The Digital Alliance of Canada](https://alliancecan.ca/en/services/advanced-research-computing/national-services/cloud) offers free virtual machines to those eager beavers. A VM can run shiny server that persistently hosts my app.\n\n#### 1. Cloud setup\n\nCreating and accessing a new VM is covered thoroughly [here](https://www.youtube.com/watch?v=JFFlkPrGFbM). Through trial and error, I learned that my instance(s) must have at least 4GB of memory and 20GB of volume size.\n\n#### 2. Shiny server\n\nShiny Server can be installed following this [guide](https://posit.co/download/shiny-server/).\n\n::: callout-important\nAll the `R` libraries that the app uses must be installed (`sudo R` to enable write permission).\n\nThose R libraries in turn depend on Linux packages that needs to be installed too.\n\n-   I don't know if there is a way to know what these dependencies are in advance\n\n    -   maybe have to test out the app in a local shiny server running on Linux (through WSL perhaps)\n\n-   I just had to look at the error log (saved to `/var/log/shiny-server/*.log`) and painstakingly install missing packages with `sudo apt-get install`\n:::\n\n\n`/etc/shiny-server/shiny-server.conf` looks like this:\n\n\n```{bash code-line-numbers=\"true\"}\n# Instruct Shiny Server to run applications as the user \"shiny\"\nrun_as ubuntu;\n\n# Define a server that listens on port 3838\nserver {\n  listen 3838;\n\n  # Define a location at the base URL\n  location / {\n\n    # Host the directory of Shiny Apps stored in this directory\n    # site_dir /srv/shiny-server;\n    site_dir /home/ubuntu/ild-shiny-app;\n    # Log all Shiny output to files in this directory\n    log_dir /var/log/shiny-server;\n\n    # When a user visits the base URL rather than a particular application,\n    # an index of the applications available in this directory will be shown.\n    directory_index on;\n  }\n}\n```\n\n- My app is hosted on `localhost:3838` (root URL).\n\n- `/home/ubuntu/ild-shiny-app` is where I cloned my git repo of the shiny app. \n\n#### 3. nginx reverse proxy\n\nWhile Shiny Sever is hosting the app locally, nginx takes HTTP/HTTPS traffic to the local URL and back. This seems like what a reverse proxy is. More detail [here](https://support.posit.co/hc/en-us/articles/213733868-Running-Shiny-Server-with-a-Proxy) and [here](https://weihanglo.tw/debian-R-setup/doc/other_nginx.html). \n\nAfter the smoke cleared and the dust settled, this is my `/etc/nginx/nginx.conf` file:\n\n\n```{bash code-line-numbers=\"true\"}\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n        worker_connections 768;\n        # multi_accept on;\n}\n\nhttp {\n     log_format  main_ext  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\" '\n                      '\"$host\" sn=\"$server_name\" '\n                      'rt=$request_time '\n                      'ua=\"$upstream_addr\" us=\"$upstream_status\" '\n                      'ut=\"$upstream_response_time\" ul=\"$upstream_response_length\" '\n                      'cs=$upstream_cache_status' ;\n     upstream backend {\n                      ip_hash;\n                      server    172.16.111.219;\n                      server    172.16.111.150;\n                      #server    172.16.111.14;\n     }\n\n\n     map $http_upgrade $connection_upgrade {\n          default upgrade;\n          ''      close;\n     }\n     include /etc/nginx/mime.types;\n     server {\n            server_name fibrosingild.com;\n\n\n            location / {\n                        proxy_pass http://localhost:3838;\n                        proxy_redirect / $scheme://$http_host/;\n                        proxy_http_version 1.1;\n                        proxy_set_header Upgrade $http_upgrade;\n                        proxy_set_header Connection $connection_upgrade;\n                        proxy_set_header Host $http_host;\n                        proxy_read_timeout 20d;\n                        proxy_buffering off;\n            }\n\n\n    listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/fibrosingild.com-0001/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/fibrosingild.com-0001/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n    }\n\n    ##\n    # Basic Settings\n    ##\n\n    sendfile on;\n    tcp_nopush on;\n    types_hash_max_size 2048;\n    # server_tokens off;\n\n    # server_names_hash_bucket_size 64;\n    # server_name_in_redirect off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ##\n    # SSL Settings\n    ##\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    ##\n    # Logging Settings\n    ##\n\n    access_log /var/log/nginx/access.log main_ext;\n    error_log /var/log/nginx/error.log warn;\n\n    ##\n    # Gzip Settings\n    ##\n\n    gzip on;\n\n    # gzip_vary on;\n    # gzip_proxied any;\n    # gzip_comp_level 6;\n    # gzip_buffers 16 8k;\n    # gzip_http_version 1.1;\n    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    ##\n    # Virtual Host Configs\n    ##\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n\n    server {\n            if ($host = fibrosingild.com) {\n                return 301 https://$host$request_uri;\n                                          } # managed by Certbot\n    }\n}\n\n\n```\n\n\n\n::: center\n\\\\ (â€¢â—¡â€¢) /\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}