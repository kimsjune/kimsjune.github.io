{
  "hash": "8080ef5a55f1eabd4d1177d1d6e81480",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ggplot2 aesthetics: scatter plot\"\nauthor: \"jk\"\ndescription: \"ggplot2 settings I like\"\ndate: \"2024-08-03\"\nformat: \n  html: default\ntoc: true\ncategories: [R, data visualization]\n---\n\n\n\n### Introduction\n\nIn R, I use `ggplot2` for most of my plotting needs, but\nI'm not exactly in love with its default plotting aesthetics. Over time I developed a particular taste for how I like my plots for presentations or publications. It requires a bit of tinkering around to take creative control over gg-plots. Check out the two scatter plots below.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n\n\nOne of these plots is better than the other one, and it's not the first one. \n\n[This book](https://clauswilke.com/dataviz/) has guided me through the logic of what makes a plot \"good\" vs. \"bad\". In this blog, I'll break down the second plot into three parts. This could be adapted to a PCA plot for instance.\n\n### Shape and fill\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg[mpg$class %in% c(\"compact\",\"2seater\",\"midsize\",\"minivan\"),], aes(displ, hwy))+\n  geom_point(aes(fill=class, shape=class), size=3, color = \"black\")+\n  scale_fill_manual(\"Class\",\n                    values = kelly()[1:4])+\n  scale_shape_manual(\"Class\",\n                     values = c(21:24))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nI'm a big fan of using both shape and colour. This could be considered redundant, but I like the extra layer of separation between groups. `aes(fill=class, shape=class)` tells `ggplot2` that \"class\" should be used as a variable to fill and shape points differently. Their respective `scale_*_manual()` specify which shapes or fill colours are available. Values 21 to 25 are available as empty `shapes` that can be filled with... `fill`. `labels` and `breaks` can be used to map different labels to each item (in this case under \"class\") on the fly without changing the underlying data. These options should be identical across both `scale_*_manual()` or else two different legends could be shown.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n  scale_fill_manual(\"Class\",\n                    values = kelly()[1:4],\n                    labels = c(\"Two seater\", \"Compact\", \"Midsize\", \"Minivan\"),\n                    breaks = c(\"2seater\", \"compact\", \"midsize\", \"minivan\"))+\n  scale_shape_manual(\"Class\",\n                     values = c(21:24),\n                    labels = c(\"Two seater\", \"Compact\", \"Midsize\", \"Minivan\"),\n                    breaks = c(\"2seater\", \"compact\", \"midsize\", \"minivan\"))\n```\n:::\n\n\n\n\nI picked the first four colours in `kelly` under `pals`. This is a nice discrete scale with a good range of choices.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### X and y axis labels\n\nThese labels can be changed on the fly with `xlab` and `ylab`. \n\n### Theme options\n\nThe rest comes from `theme()`. There are a ton of [options](https://ggplot2.tidyverse.org/reference/theme.html), but only a few are relevant to me. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_bw()+ # gets rid of grey background in the plot area\ntheme(\n      # grid lines can be controversial, in my field it's not seen often\n      panel.grid.minor=element_blank(), \n      panel.grid.major=element_blank(),\n      axis.text = element_text(color=\"black\",size=14), # default font size is too small\n      axis.ticks = element_line(colour=\"black\"), # just plain old black please\n      axis.title = element_text(size=14), # default font size is too small\n      legend.title=element_text(size=14, vjust=0.5, hjust=0.5),\n      legend.text=element_text(size=14, vjust=0.5, hjust=0),\n      plot.margin=unit(c(1,1,1,1),\"cm\"),\n      plot.background=element_rect(fill=\"transparent\", colour=NA),\n      panel.border = element_rect(colour=\"black\"), # I like to draw a crisp border\n      panel.background=element_rect(fill=\"transparent\", colour=NA),\n      legend.background=element_rect(fill=\"transparent\", colour=NA),\n      legend.box.background=element_rect(fill=\"transparent\", colour=NA),\n      legend.key=element_rect(fill=\"transparent\", colour=NA),\n      legend.position = 'right',\n      aspect.ratio=1) # I like it to be square\n```\n:::\n\n\n\nOne thing I'm not certain about is the role of `fill=\"transparent\", colour=NA`. Those are meant to disable bakground colour, but it can depend on how the plot is saved *I think* (ex. `ggsave()`, `pdf()`, `png()`, etc). So those could be redundant/pointless. \n\n### Font size\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nI see this \"problem\" often where the text is too *damn* small. The final output size of the plot is also crucial. If this plot was saved as a 6' by 6' wall mural, point 14 font will not help with the cause. Instead, saving as a few inches tall/wide then scaling up (as vector graphics hopefully) would preserve the relative sizes between text, lines and points.\n\n::: center\n\\\\ (•◡•) /\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}