{
  "hash": "04981ca2fb90c0cd49d64dbdd1790ece",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Nextflow: using splitCsv() operator\"\nauthor: \"jk\"\ndescription: a tech tip to future self\ndate: \"2024-05-08\"\nformat: \n  html: default\ntoc: true\ncategories: [nextflow, 2024]\n---\n\n\n### Introduction\n\nWhen I get `*.fastq.gz` files back for my Visium spatial libraries, `spaceranger count` command is used to generate various output files for QC metrics and downstream analysis. The command in my slurm job script looks like this:\n\n\n::: {.cell}\n\n```{.bash .cell-code .code-overflow-wrap}\nspaceranger count --id=18_57617_A1 --transcriptome=/home/skim823/projects/def-fdick/skim823/genomes/spacerange_hg38/refdata-gex-GRCh38-2020-A --probe-set=/home/skim823/projects/def-fdick/skim823/programs/spaceranger-2.1.1/probe_sets/Visium_Human_Transcriptome_Probe_Set_v2.0_GRCh38-2020-A.csv --fastqs=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim --sample=18_57617_A1_D1 --cytaimage=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/assay_CAVG10505_2023-12-06_10-13-34_V43L25-333_1701876913_CytAssist/CAVG10505_2023-12-06_10-35-13_2023-12-06_10-13-34_V43L25-333_D1_18-57617-A1.tif --image=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/tiff/18-57617-A1.tif --slide=V43L25-333 --area=D1 --loupe-alignment=/scratch/skim823/visium/20240117_LH00244_0047_A22GM27LT3_Mura_Kim/etc/json/18_57617_A1.json\n```\n:::\n\n\nWith future samples, I want to use `Nextflow` to automate job submission.\n\n### Strategy\n\nMy initial thought was to parse `params.fastq`, but `--cytaimage`, `--image`, `--area`, and `--loupe-alignment` arguments are no where to be found in these `fastq` files (unless I submit an ungodly sample name to the genomics core). Instead, I can provide a `metadata.csv` and use `splitCsv()` to store and consume all the required arguments.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|id          |sample         |cytaimage                                                                                                                                               |image                    |slide      |area |json                      |\n|:-----------|:--------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------|:----------|:----|:-------------------------|\n|18_57617_A1 |18_57617_A1_D1 |etc/assay_CAVG10505_2023-12-06_10-13-34_V43L25-333_1701876913_CytAssist/CAVG10505_2023-12-06_10-35-13_2023-12-06_10-13-34_V43L25-333_D1_18-57617-A1.tif |etc/tiff/18-57617-A1.tif |V43L25-333 |D1   |etc/json/18_57617_A1.json |\n|20_24241_B2 |20_24241_B2_A1 |etc/assay_CAVG10505_2023-12-06_10-13-34_V43L25-333_1701876913_CytAssist/CAVG10505_2023-12-06_10-35-13_2023-12-06_10-13-34_V43L25-333_A1_20-24241-B2.tif |etc/tiff/20-24241-B2.tif |V43L25-333 |A1   |etc/json/20_24241_B2.json |\n\n\n:::\n:::\n\n\nIn the working directory, I have `${sample}_{S7,S8}_{L001,L002}_{R1,R2}_001.fastq.gz` files. `id` and `sample` arguments in the .csv file must follow such format above. I think `spaceranger` is expecting some pre-determined `fastq.gz` read pairs across a couple of sequencing lanes.\n\n`etc/` is a subdirectory with CytAssist images, hi-res images, and alignment json files.\n\n### Nextflow\n\nThe full `main.nf` looks like this:\n\n\n::: {.cell}\n\n```{.groovy .cell-code  code-line-numbers=\"true\"}\nnextflow.enable.dsl=2\nparams.csv = \"$projectDir/metadata.csv\"\nparams.transcriptome = \"/home/skim823/projects/def-fdick/skim823/genomes/spacerange_hg38/refdata-gex-GRCh38-2020-A\"\nparams.probeSet = \"/home/skim823/projects/def-fdick/skim823/programs/spaceranger-2.1.1/probe_sets/Visium_Human_Transcriptome_Probe_Set_v2.0_GRCh38-2020-A.csv\"\n\ncsv_ch = Channel\n            .fromPath(params.csv)\n            .splitCsv(header: true)\n            .map(\n                row -> \n                tuple(row.id,\n                row.sample,\n                file (row.cytaimage),\n                file (row.image),\n                row.slide,\n                row.area,\n                file(row.json))\n            )\n\ntranscriptome_ch = Channel.fromPath(params.transcriptome)\nprobeSet_ch = Channel.fromPath(params.probeSet)\n\nprocess SPACECOUNT {\n    publishDir \"$projectDir/output\", mode: \"copy\"\n    cpus 32\n    memory 128.GB\n    time 2.h\n    clusterOptions '--account=def-muram'\n\n    input:\n    tuple val(id), val(sample), file (cytaimage), file (image), val(slide), val(area), file (json)\n    // setting directories as path() doesn't seem to work. It can't resolve relative paths. If I just use val(), I just have to express parameters as absolute paths in the script. \n    // path doesn't work but file does!\n    path transcriptome\n    path probeSet\n\n    output:\n    path \"$id/\"\n\n    script:\n    \"\"\"\n    spaceranger count --id $id  --fastqs $baseDir --sample $sample --cytaimage $cytaimage --image $image --slide $slide --area $area --loupe-alignment $json --transcriptome $transcriptome --probe-set $probeSet\n    \"\"\"\n}\n\nworkflow {\n    SPACECOUNT(csv_ch, transcriptome_ch.collect(), probeSet_ch.collect())\n}\n```\n:::\n\n\n::: callout-important\n-   within `.map()` (lines 9-18), must use `file()` instead of `path()` (error otherwise)\n\n-   line 34: must use `file()` for file paths instead of... `path()` (no error, but the relative path does not resolve). I thought `file()` was DSL=1 lingo, but maybe not?\n\n-   [reference](https://nextflow-io.github.io/patterns/process-per-csv-record/)\n:::\n\n::: center\n\\\\ (•◡•) /\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}